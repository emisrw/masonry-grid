{"version":3,"sources":["Mansonry.js","App.js","reportWebVitals.js","index.js"],"names":["Mansonry","children","wrapperRef","useRef","useState","isDOMReady","setIsDomReady","resizeElements","Array","from","current","forEach","child","element","wrapper","rowHeight","Number","parseInt","getComputedStyle","getPropertyValue","rowGap","spanValue","Math","ceil","getBoundingClientRect","height","style","gridRowEnd","resizeElement","useEffect","observer","MutationObserver","mutationList","mutation","target","tagName","addEventListener","observe","attributes","childList","subtree","window","disconnect","removeEventListener","className","ref","App","photos","step","push","alt","src","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sOA+DeA,EA7DE,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACZC,EAAaC,iBAAO,MADO,EAEGC,oBAAS,GAFZ,mBAE1BC,EAF0B,KAEdC,EAFc,KAwB3BC,EAAiB,kBACrBC,MAAMC,KAAKP,EAAWQ,QAAQT,UAAUU,SAAQ,SAACC,GAAD,OArB5B,SAACC,GACrB,GAAKX,EAAWQ,QAAhB,CADiC,IAKhBI,EAAYZ,EAArBQ,QACFK,EAAYC,OAAOC,SACvBC,iBAAiBJ,GAASK,iBAAiB,mBAEvCC,EAASJ,OAAOC,SACpBC,iBAAiBJ,GAASK,iBAAiB,iBAEvCE,EAAYC,KAAKC,MACpBV,EAAQW,wBAAwBC,OAASL,IAAWL,EAAYK,IAE/DC,IACFR,EAAQa,MAAMC,WAAd,eAAmCN,KAMnCO,CAAchB,OA4BlB,OAzBAiB,qBAAU,WACHxB,EAGHE,IAFAD,GAAc,KAIf,CAACD,EAAYE,IAEhBsB,qBAAU,WACR,IACMC,EAAW,IAAIC,kBAAiB,SAACC,GAAD,OACpCA,EAAarB,SAAQ,SAACsB,GACY,QAA5BA,EAASC,OAAOC,SAClBF,EAASC,OAAOE,iBAAiB,OAAQ7B,GAAgB,SAM/D,OAFAuB,EAASO,QAAQnC,EAAWQ,QARb,CAAE4B,YAAY,EAAMC,WAAW,EAAMC,SAAS,IAS7DC,OAAOL,iBAAiB,SAAU7B,GAC3B,WACLuB,EAASY,aACTD,OAAOE,oBAAoB,SAAUpC,MAEtC,IAGD,qBAAKqC,UAAU,gBAAgBC,IAAK3C,EAApC,SACGD,KC7CQ6C,MAVf,WAGE,IAFA,IAAMC,EAAS,GAENC,EAAO,EAAGA,EAAO,EAAGA,IAC3BD,EAAOE,KAAK,qBAAgBC,IAAKF,EAAMG,IAAG,oBAAeH,EAAf,SAApBA,IAGxB,OAAO,cAAC,EAAD,UAAWD,KCELK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8f970521.chunk.js","sourcesContent":["import { useRef, useEffect, useState } from \"react\";\n\nconst Mansonry = ({ children }) => {\n  const wrapperRef = useRef(null);\n  const [isDOMReady, setIsDomReady] = useState(false);\n\n  const resizeElement = (element) => {\n    if (!wrapperRef.current) {\n      return;\n    }\n\n    const { current: wrapper } = wrapperRef;\n    const rowHeight = Number.parseInt(\n      getComputedStyle(wrapper).getPropertyValue(\"grid-auto-rows\")\n    );\n    const rowGap = Number.parseInt(\n      getComputedStyle(wrapper).getPropertyValue(\"grid-row-gap\")\n    );\n    const spanValue = Math.ceil(\n      (element.getBoundingClientRect().height + rowGap) / (rowHeight + rowGap)\n    );\n    if (spanValue) {\n      element.style.gridRowEnd = `span ${spanValue}`;\n    }\n  };\n\n  const resizeElements = () =>\n    Array.from(wrapperRef.current.children).forEach((child) =>\n      resizeElement(child)\n    );\n\n  useEffect(() => {\n    if (!isDOMReady) {\n      setIsDomReady(true);\n    } else {\n      resizeElements();\n    }\n  }, [isDOMReady, resizeElements]);\n\n  useEffect(() => {\n    const config = { attributes: true, childList: true, subtree: true };\n    const observer = new MutationObserver((mutationList) =>\n      mutationList.forEach((mutation) => {\n        if (mutation.target.tagName === \"IMG\") {\n          mutation.target.addEventListener(\"load\", resizeElements, false);\n        }\n      })\n    );\n    observer.observe(wrapperRef.current, config);\n    window.addEventListener(\"resize\", resizeElements);\n    return () => {\n      observer.disconnect();\n      window.removeEventListener(\"resize\", resizeElements);\n    };\n  }, []);\n\n  return (\n    <div className=\"mansonry-grid\" ref={wrapperRef}>\n      {children}\n    </div>\n  );\n};\n\nexport default Mansonry;\n","import \"./App.css\";\nimport Mansonry from \"./Mansonry\";\n\nfunction App() {\n  const photos = [];\n\n  for (let step = 1; step < 8; step++) {\n    photos.push(<img key={step} alt={step} src={`/assets/00${step}.jpg`} />);\n  }\n\n  return <Mansonry>{photos}</Mansonry>;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}