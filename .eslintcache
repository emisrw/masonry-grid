[{"/Users/emis/Desktop/projects/masonry/mansonry-grid/src/index.js":"1","/Users/emis/Desktop/projects/masonry/mansonry-grid/src/reportWebVitals.js":"2","/Users/emis/Desktop/projects/masonry/mansonry-grid/src/App.js":"3","/Users/emis/Desktop/projects/masonry/mansonry-grid/src/Mansonry.js":"4"},{"size":500,"mtime":1610295990492,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1610295990494,"results":"7","hashOfConfig":"6"},{"size":283,"mtime":1610303916445,"results":"8","hashOfConfig":"6"},{"size":1727,"mtime":1610301697738,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"j0mgtk",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"/Users/emis/Desktop/projects/masonry/mansonry-grid/src/index.js",[],["20","21"],"/Users/emis/Desktop/projects/masonry/mansonry-grid/src/reportWebVitals.js",[],"/Users/emis/Desktop/projects/masonry/mansonry-grid/src/App.js",[],"/Users/emis/Desktop/projects/masonry/mansonry-grid/src/Mansonry.js",["22","23"],"import { useRef, useEffect, useState } from \"react\";\n\nconst Mansonry = ({ children }) => {\n  const wrapperRef = useRef(null);\n  const [isDOMReady, setIsDomReady] = useState(false);\n\n  const resizeElement = (element) => {\n    if (!wrapperRef.current) {\n      return;\n    }\n\n    const { current: wrapper } = wrapperRef;\n    const rowHeight = Number.parseInt(\n      getComputedStyle(wrapper).getPropertyValue(\"grid-auto-rows\")\n    );\n    const rowGap = Number.parseInt(\n      getComputedStyle(wrapper).getPropertyValue(\"grid-row-gap\")\n    );\n    const spanValue = Math.ceil(\n      (element.getBoundingClientRect().height + rowGap) / (rowHeight + rowGap)\n    );\n    if (spanValue) {\n      element.style.gridRowEnd = `span ${spanValue}`;\n    }\n  };\n\n  const resizeElements = () =>\n    Array.from(wrapperRef.current.children).forEach((child) =>\n      resizeElement(child)\n    );\n\n  useEffect(() => {\n    if (!isDOMReady) {\n      setIsDomReady(true);\n    } else {\n      resizeElements();\n    }\n  }, [isDOMReady, resizeElements]);\n\n  useEffect(() => {\n    const config = { attributes: true, childList: true, subtree: true };\n    const observer = new MutationObserver((mutationList) =>\n      mutationList.forEach((mutation) => {\n        if (mutation.target.tagName === \"IMG\") {\n          mutation.target.addEventListener(\"load\", resizeElements, false);\n        }\n      })\n    );\n    observer.observe(wrapperRef.current, config);\n    window.addEventListener(\"resize\", resizeElements);\n    return () => {\n      observer.disconnect();\n      window.removeEventListener(\"resize\", resizeElements);\n    };\n  }, []);\n\n  return (\n    <div className=\"mansonry-grid\" ref={wrapperRef}>\n      {children}\n    </div>\n  );\n};\n\nexport default Mansonry;\n",{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","severity":1,"message":"29","line":27,"column":9,"nodeType":"30","endLine":30,"endColumn":6,"suggestions":"31"},{"ruleId":"28","severity":1,"message":"32","line":55,"column":6,"nodeType":"33","endLine":55,"endColumn":8,"suggestions":"34"},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"react-hooks/exhaustive-deps","The 'resizeElements' function makes the dependencies of useEffect Hook (at line 38) change on every render. To fix this, wrap the definition of 'resizeElements' in its own useCallback() Hook.","VariableDeclarator",["37"],"React Hook useEffect has a missing dependency: 'resizeElements'. Either include it or remove the dependency array.","ArrayExpression",["38"],"no-global-assign","no-unsafe-negation",{"desc":"39","fix":"40"},{"desc":"41","fix":"42"},"Wrap the definition of 'resizeElements' in its own useCallback() Hook.",{"range":"43","text":"44"},"Update the dependencies array to be: [resizeElements]",{"range":"45","text":"46"},[770,871],"useCallback(() =>\n    Array.from(wrapperRef.current.children).forEach((child) =>\n      resizeElement(child)\n    ))",[1595,1597],"[resizeElements]"]